%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 204.000000 179.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.4 (Build 17E199) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 204 179
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 204 179
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Helvetica
%!FontType1-1.0: Helvetica 1.0000.0.0000
14 dict begin/FontName /Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /E put
dup 34 /N put
dup 35 /D put
dup 36 /F put
dup 37 /space put
dup 38 /bracketleft put
dup 39 /r put
dup 40 /less put
dup 41 /l put
dup 42 /bracketright put
dup 43 /equal put
dup 44 /L put
dup 45 /parenleft put
dup 46 /nine put
dup 47 /slash put
dup 48 /one put
dup 49 /zero put
dup 50 /parenright put
dup 51 /S put
dup 52 /R put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<








00>] def
/CharStrings 22 dict dup begin
/.notdef 0 def
/space 1 def
/parenleft 2 def
/parenright 3 def
/slash 4 def
/zero 5 def
/one 6 def
/nine 7 def
/less 8 def
/equal 9 def
/D 10 def
/E 11 def
/F 12 def
/L 13 def
/N 14 def
/R 15 def
/S 16 def
/bracketleft 17 def
/bracketright 18 def
/l 19 def
/r 20 def
/u20B8 21 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4072461 def
currentdict currentfile eexec

DD8C84208FF73F44CD7633C08E146BB017C68DF1E398B8E1C02D59081CFA6070E58ACCD54F26714F8409FC994D5E8C2049342D10500C28997457DD0BB2B239290568FA9F0264BB372FD87E4891AFA5075D2FE4B362DB7235E28052FE698EBA2DF66C6F2548233351BA409427BA8BC4F0A99F00FB737CCEE364C1511082B569F7FD2795E8101A9730D1B6789E41FA53A7408E83BF9D5DBF74CEB49E8D7F752A145F51B2A96E3C26BB4BD1225619DD82D1D5F3D595193CDCE9F3F2AB1A07AA67AD16774ADC1CEF9269E696D2DB4E18012E9D97AC02CDA21E2A4CD5B1ACC1603C5DD102922F173F4166252D90DA0DEDCCE6DAFB1566E14954A2A39CC5ADBCADBD07762B983AC798CA670570F46B3F24B5D2D9A7F95BD72CC0C9FBB29B4DB9E84ED556567A285EC14779F9BA35F8D74F567E29901B3615294D9B273EFB1526553E925E2AE7385D7AF860FB19B5CE97CDEC084DAABB37D1F346E82B34A0C6E70448F066544BDF6A5B9EC49C001A02EA6E5241DD0B80480C762AE613733F0244DBB6803FBF7F2C2E70954273D53692FACC11D5232D21C9100236484E50DB06AF09AECCE209435ABA1E9D5CEE7D5E3FAEB8BBC261634CCA91F1DCB0F4B254E7F9F278F09B1882F3BD17C5C04019CCB29ECCB513AF11A8F356AA6E2292936C36871206801B2BD70DD54C5D72F28DE76C653C50164993A77882678F7F3C2B7DD4F95EEDBC75B344E4C70E4612EF4BCC77F05862994AC57A802F1802F3A514C4E54821564C1E8C030AC6896AC289E4888880801AD73FBB2245F66FF165D4891EB913C1D9AC2E8AF12F74D73AFC23B13EBD31A7A30DE85D2F0C00189AEC5255CEB688632137DD79FAA9A515CA29EA3345F2815986607BF79FF3D7D3E4894980DE301D328BEC8D15E0E9689919A12FCEF142BE00A0C9D064A812A254C33021AA7A1DCC050D4FDBCB78785FBD317726CFFEAD1BA2D760871A884F27593BC523F435AF30A998C9057ECDBABA0AB2F625168455E953281F5FBFE58A894F20B1FDDA4D39475600EA571BC2373546851A7673C1383D9A010D3873A1253670BD7896236F55AF07C91C2BE33F2C4EAD17F1FF70D0CD609D6FB7CC5DDB06E09D95225B28DF7A730BBECBE688D0B09148208B7C59ECB9ED2586B8CF5D8A2889BFCF43072C80634DC9201338FFB9DB3ECF162FEEE4187E0FCA5664CAB7AF5E7E696568077BAC1404A33F032EF3D5D50E66BF9CBC68A9672D67115C7C28A59128B5DBC25014C26FF8E0D86660C6DD9522C9C1F8FFF9B1E4B87047325D0A029DEEAC8F8B5E01046E83FA7524C670D7DBFE5B887A46D93F986F1831C416E7D2331732611D853C0CBECC625F81151B8FC7AA35E12C345CB289672EEC6E077FF35F98A65A10293731274A08724DB8C174ABEDBAA0CC6A87A2AAA52AF84F10CE4CFD56AABDDC1748B0684E04246E
FB845C37AAF3451C29762AFBAA6945347B80C45DC34BB553DB227A5CFAAEE4B920782C1138194AF100D6A5966692FAC337058B06F3C2B13835F5F04B0D51F8E6902D1629F770F3374439D6B21295689EDB9ECEDC5B2501C85624FA02936308C6930F4A100C3423E4AC229147125664963425C5DB884D17E1DE3DBB0406B12603AEBD8B263C01F27BCE0477757B4C34D22CAB7E11497190D2C0F94F34FC11C4E3780F65A1029CAD707073E34F19D8098B6A74CEBB9D234D7275B8FE95707CEE87CAAED90A286A13386DB35CAA3E8D365C0F7D56824141F099798E43E44FB2864A829F1C2C62A9889B232B7819567C3421F7D4FB688C093943DE75300266FDD8D6FB9533AAF554F82B8F21CF71BFF06A0847CC488C5F3AD94AE5FDBD2AAE76462515E38E1E91CC1B91D64ED19128AE6074F63E95CA18A8F716463A9859429158C552B738C844D9DC1C6CEB89721C5592DFE728F383B7E37A701CD2B8C31745218C4C135973299858DBA1FDB6EDCA3CEE1D96F6EDCD71B421343BA6844C2D5E058901032C7ADB5179827845038712E64B1B9E9977FB380E5ED9526790D6065F3F0029A013D5329ECC590F994B46036ED5A8F2D1027F12974FB697D9ECE81177066D363AB73BDFCB9089DE34D207ED3761FBEAC1747C482FE9D4356D0917116CC314C0B2B5B2517D32AA5B19C1710EB091705D5DCC4C3631328DD3EBF835C96274A937B05B50030BC96A499C01B48EE54DCA93278F786FC23BC230711254C5B7D451437B6CF937DE4100E1DD9A8200B32D1B0C2FAE483E0B46490BD8D93444631A68F13A574A209E3BFAB3C4809ACCB82BF20DEEA082B05B9731646580EF41A705A35164B082489973763186357F1D80696F09BEB7CF146E62169246CDCF112151DDBE234694C84BAA9DA56B2796D95F9423B94D8E7C0077A46A23A9233541C28453DB89BD741C8A38D421D6947CEAAC94AA7F8E3E80DEB2BCAE5A3111F572D100ABF50BEEE878AFEA38452784CE47DEBC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Helvetica cguidfix
/F1.1/Helvetica renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
0 0 204 179 rc
-98 513 m
478 513 l
478 -221 l
-98 -221 l
h
-98 513 m
f
0.60000002 0.152941 0.152941 sc
108.10556 152.91519 m
113.04816 148.30212 113.04816 140.82288 108.10556 136.20981 c
103.16299 131.59673 95.149506 131.59673 90.20694 136.20981 c
85.264343 140.82288 85.264343 148.30212 90.20694 152.91519 c
95.149506 157.52827 103.16299 157.52827 108.10556 152.91519 c
f
1 J
1 j
0 0 0 sc
1 0 0 -1 -98 513 cm
206.10556 360.08481 m
211.04816 364.69788 211.04816 372.17712 206.10556 376.79019 c
201.16299 381.40329 193.14951 381.40329 188.20694 376.79019 c
183.26434 372.17712 183.26434 364.69788 188.20694 360.08481 c
193.14951 355.47171 201.16299 355.47171 206.10556 360.08481 c
S
0.54901999 0.48627499 0.133333 sc
CM
156.25 86.625 m
168.90625 74.8125 l
156.25 63 l
143.59375 74.8125 l
h
156.25 86.625 m
f
0 0 0 sc
1 0 0 -1 -98 513 cm
254.25 426.375 m
266.90625 438.1875 l
254.25 450 l
241.59375 438.1875 l
h
254.25 426.375 m
S
0.129412 0.50196099 0.25490201 sc
CM
46.28125 86.625 m
58.9375 74.8125 l
46.28125 63 l
33.625 74.8125 l
h
46.28125 86.625 m
f
0 0 0 sc
1 0 0 -1 -98 513 cm
144.28125 426.375 m
156.9375 438.1875 l
144.28125 450 l
131.625 438.1875 l
h
144.28125 426.375 m
S
204.84056 377.82523 m
242.49785 423.8302 l
S
CM
149.56511 82.979263 m
146.81931 91.070038 l
142.17639 87.269585 l
h
149.56511 82.979263 m
f
0 J
0 j
1 0 0 -1 -98 513 cm
247.56511 430.02072 m
244.81931 421.92996 l
240.17639 425.73041 l
h
247.56511 430.02072 m
S
1 J
1 j
189.84509 378.082 m
155.5061 423.38025 l
S
CM
52.673264 83.244522 m
59.89682 87.807442 l
55.115391 91.432068 l
h
52.673264 83.244522 m
f
0 J
0 j
1 0 0 -1 -98 513 cm
150.67326 429.75549 m
157.89682 425.19257 l
153.11539 421.56793 l
h
150.67326 429.75549 m
S
1 J
1 j
141.15158 429.29602 m
137.46503 417.11346 133.06097 395.18817 143.4375 381.5 c
150.65619 371.97748 163.39236 368.59927 174.65195 367.65488 c
S
CM
84.652351 145.57608 m
76.569115 148.34398 l
76.742256 142.34648 l
h
84.652351 145.57608 m
f
0 J
0 j
1 0 0 -1 -98 513 cm
182.65236 367.42392 m
174.56912 364.65601 l
174.74225 370.65353 l
h
182.65236 367.42392 m
S
1 1 1 sc
CM
159.04527 107.01148 m
160.58908 105.69347 160.58908 103.55653 159.04527 102.23852 c
157.5015 100.92049 154.9985 100.92049 153.45473 102.23852 c
151.91092 103.55653 151.91092 105.69347 153.45473 107.01148 c
154.9985 108.32951 157.5015 108.32951 159.04527 107.01148 c
f
1 J
1 j
0 0 0 sc
1 0 0 -1 -98 513 cm
257.04529 405.98853 m
258.58908 407.30655 258.58908 409.44345 257.04529 410.76147 c
255.5015 412.0795 252.9985 412.0795 251.45473 410.76147 c
249.91092 409.44345 249.91092 407.30655 251.45473 405.98853 c
252.9985 404.6705 255.5015 404.6705 257.04529 405.98853 c
S
1 1 1 sc
CM
125.87341 77.198982 m
127.4172 75.880966 127.4172 73.744034 125.87341 72.426018 c
124.32961 71.107994 121.82664 71.107994 120.28284 72.426018 c
118.73905 73.744034 118.73905 75.880966 120.28284 77.198982 c
121.82664 78.517006 124.32961 78.517006 125.87341 77.198982 c
f
0 0 0 sc
1 0 0 -1 -98 513 cm
223.8734 435.80103 m
225.41721 437.11905 225.41721 439.25595 223.8734 440.57397 c
222.32962 441.892 219.82663 441.892 218.28285 440.57397 c
216.73904 439.25595 216.73904 437.11905 218.28285 435.80103 c
219.82663 434.483 222.32962 434.483 223.8734 435.80103 c
S
241.59375 438.5 m
234.93126 438.5 l
S
CM
128.93126 74.8125 m
136.93126 71.8125 l
136.93126 77.8125 l
h
128.93126 74.8125 m
f
0 J
0 j
1 0 0 -1 -98 513 cm
226.93126 438.1875 m
234.93126 441.1875 l
234.93126 435.1875 l
h
226.93126 438.1875 m
S
1 J
1 j
254.5 426.375 m
254.5 421.64999 l
S
CM
156.25 99.349998 m
153.25 91.349998 l
159.25 91.349998 l
h
156.25 99.349998 m
f
0 J
0 j
1 0 0 -1 -98 513 cm
254.25 413.64999 m
251.25 421.64999 l
257.25 421.64999 l
h
254.25 413.64999 m
S
1 J
1 j
253.49307 405.0621 m
252.1169 400.9415 248.26036 393.52695 237.5 386 c
231.66498 381.91837 224.78966 378.49606 218.38396 375.78854 c
S
CM
112.92367 140.10172 m
119.29964 134.41426 l
121.46717 140.00906 l
h
112.92367 140.10172 m
f
0 J
0 j
1 0 0 -1 -98 513 cm
210.92368 372.89828 m
217.29964 378.58572 l
219.46716 372.99094 l
h
210.92368 372.89828 m
S
1 J
1 j
256.45438 405.57269 m
262.47119 397.59879 277.86804 374.76361 264.625 365.5 c
255.48099 359.1037 235.11346 360.87808 219.13448 363.62924 c
S
CM
113.28378 147.85548 m
121.70735 146.42596 l
120.57026 152.31723 l
h
113.28378 147.85548 m
f
0 J
0 j
1 0 0 -1 -98 513 cm
211.28378 365.14453 m
219.70735 366.57404 l
218.57027 360.68277 l
h
211.28378 365.14453 m
S
1 J
1 j
218.82405 435.41422 m
216.57022 432.17209 212.84818 425.63144 208.6875 413.5 c
206.04346 405.79065 203.70735 397.23788 201.84135 389.67319 c
S
CM
102.01308 131.11748 m
100.92017 122.64367 l
106.76148 124.01447 l
h
102.01308 131.11748 m
f
0 J
0 j
1 0 0 -1 -98 513 cm
200.01309 381.88251 m
198.92017 390.35632 l
204.76147 388.98553 l
h
200.01309 381.88251 m
S
1 J
1 j
217.85722 440.14514 m
208.99208 445.28 184.5233 457.66702 179 441.5625 c
174.94247 429.73181 182.2515 405.8559 188.77109 388.59845 c
S
CM
93.709503 131.84261 m
87.98085 125.50362 l
93.561493 123.29988 l
h
93.709503 131.84261 m
f
0 J
0 j
1 0 0 -1 -98 513 cm
191.7095 381.15741 m
185.98085 387.49637 l
191.56149 389.70013 l
h
191.7095 381.15741 m
S
1 1 1 sc
CM
86.5 34.875 m
111.8125 34.875 l
111.8125 11.25 l
86.5 11.25 l
h
86.5 34.875 m
f
1 J
1 j
0 0 0 sc
1 0 0 -1 -98 513 cm
184.5 478.5 m
210.5 478.5 l
210.5 502.5 l
184.5 502.5 l
h
184.5 478.125 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 99.15625 23.0625 cm
/F1.1[ 7 0 0 -7 0 0]sf
-7.3896484 2 m
(!"#)[ 4.668945 5.055176 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -98 513 cm
142.00162 447.87234 m
140.74823 456.56369 140.96001 469.27734 150 478.125 c
156.37524 484.36459 165.86531 487.43274 174.66417 488.89874 c
S
CM
84.611397 23.226936 m
76.987442 27.083794 l
76.331306 21.119778 l
h
84.611397 23.226936 m
f
0 J
0 j
1 0 0 -1 -98 513 cm
182.6114 489.77307 m
174.98744 485.9162 l
174.33131 491.88022 l
h
182.6114 489.77307 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 27.668407 137.94832 cm
/F1.1[ 8 0 0 -8 0 0]sf
-12.556641 3 m
($%&'%\(%\)*)[ 4.886719 2.222656 2.222656 2.664062 2.222656 4.671875 2.222656 1.777344 0.000000 ] xS
1 0 0 -1 40.145985 23.508764 cm
-12.556641 3 m
($%&'%+%\)*)[ 4.886719 2.222656 2.222656 2.664062 2.222656 4.671875 2.222656 1.777344 0.000000 ] xS
1 0 0 -1 80.768745 57.236061 cm
-13.638672 3 m
(,%-./012)[ 4.156250 2.222656 2.664062 4.449219 2.222656 4.449219 4.449219 0.000000 ] xS
1 0 0 -1 101.46796 83.31147 cm
-14.228516 3 m
(3%-0/012)[ 5.335938 2.222656 2.664062 4.449219 2.222656 4.449219 4.449219 0.000000 ] xS
1 0 0 -1 145.7881 136.38139 cm
-14.228516 3 m
(3%-0/012)[ 5.335938 2.222656 2.664062 4.449219 2.222656 4.449219 4.449219 0.000000 ] xS
1 0 0 -1 174.74011 159.10118 cm
-14.449219 3 m
(4%-./012)[ 5.777344 2.222656 2.664062 4.449219 2.222656 4.449219 4.449219 0.000000 ] xS
ep
end
%%Trailer
%%EOF
